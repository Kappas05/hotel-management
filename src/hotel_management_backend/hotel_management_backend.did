type Error = variant {
  InvalidDateRange : record { msg : text };
  RoomUnavailable : record { msg : text };
  NotFound : record { msg : text };
  Overbooking : record { msg : text };
};
type Guest = record {
  id : nat64;
  name : text;
  created_at : nat64;
  email : text;
  preferred_room_type : text;
};
type GuestPayload = record {
  name : text;
  email : text;
  preferred_room_type : text;
};
type Reservation = record {
  id : nat64;
  room_id : nat64;
  end_date : nat64;
  created_at : nat64;
  start_date : nat64;
  guest_id : nat64;
};
type ReservationPayload = record {
  room_id : nat64;
  end_date : nat64;
  start_date : nat64;
  guest_id : nat64;
};
type Result = variant { Ok : Reservation; Err : Error };
type Result_1 = variant { Ok : Guest; Err : Error };
type Result_2 = variant { Ok : Room; Err : Error };
type Result_3 = variant { Ok : vec Guest; Err : Error };
type Result_4 = variant { Ok : vec Room; Err : Error };
type Result_5 = variant { Ok; Err : Error };
type Room = record {
  id : nat64;
  updated_at : opt nat64;
  room_type : text;
  created_at : nat64;
  availability : bool;
  room_number : text;
  price : float64;
};
type RoomPayload = record {
  room_type : text;
  availability : bool;
  room_number : text;
};
service : {
  adjust_room_pricing : () -> ();
  create_guest : (GuestPayload) -> (opt Guest);
  create_reservation : (ReservationPayload) -> (Result);
  create_room : (RoomPayload) -> (opt Room);
  delete_guest : (nat64) -> (Result_1);
  delete_reservation : (nat64) -> (Result);
  delete_room : (nat64) -> (Result_2);
  get_all_guests : () -> (Result_3) query;
  get_guest : (nat64) -> (Result_1) query;
  get_reservation : (nat64) -> (Result) query;
  get_room : (nat64) -> (Result_2) query;
  recommend_rooms_based_on_preferences : (nat64) -> (Result_4) query;
  update_guest : (nat64, GuestPayload) -> (Result_1);
  update_room : (nat64, RoomPayload) -> (Result_2);
  update_room_availability : (nat64, bool) -> (Result_5);
}
